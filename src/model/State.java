package model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class State {
    private int id;
    private Map<Character, ArrayList<State>> nextState;
    private Set<State> states;
    private boolean isVaild;

    // NFA constructor
    public State(int id) {
        this.setId(id);
        this.setNextState(new HashMap<Character, ArrayList<State>>());
        this.setVaild(false);
    }

    // DFA constructor
    public State(Set<State> states, int id) {
        this.setStates(states);
        this.setId(id);
        this.setNextState(new HashMap<Character, ArrayList<State>>());

        // find if there is final state in this set of states
        for (State p : states) {
            if (p.isVaild()) {
                this.setVaild(true);
                break;
            }
        }
    }

    // Add transition between states and insert into the arrayList
    // or create the arrayList based on key
    public void addTransition(State next, char key) {
        ArrayList<State> list = this.nextState.get(key);

        if (list == null) {
            list = new ArrayList<State>();
            this.nextState.put(key, list);
        }

        list.add(next);
    }

    // Get all transition states based on symbol
    public ArrayList<State> getAllTransitions(char c) {
        if (this.nextState.get(c) == null) {
            return new ArrayList<State>();
        } else {
            return this.nextState.get(c);
        }
    }

    // Autogenerated Getters and Setters
    public Map<Character, ArrayList<State>> getNextState() {

        return nextState;
    }

    public void setNextState(HashMap<Character, ArrayList<State>> hashMap) {

        this.nextState = hashMap;
    }

    public int getId() {

        return id;
    }

    public void setId(int id) {

        this.id = id;
    }

    public boolean isVaild() {

        return isVaild;
    }

    public void setVaild(boolean isVaild) {

        this.isVaild = isVaild;
    }

    public Set<State> getStates() {

        return states;
    }

    public void setStates(Set<State> states) {

        this.states = states;
    }
}
